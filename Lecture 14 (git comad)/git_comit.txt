1. Работа с историей изменений. Написать команды:
	1.1которая выводит сообщения и автора всех коммитов из ветки develop-feature1, 
	которые сделаны за последние 3 часа и которых нет в родительских ветках (develop, master). 
	Сортировка по дате, первые более новые.

Рішення:
	>> git log ^master ^develop develop-feature1 --pretty="%s - %cn" --since=3.hours
	
	^master ^develop - виключення з пошуку даних віток;
	--pretty - дозволяє форматувати лог особистого структури;
	%s - повідомлення коміта;
	%cn - автор комміта;
	--since - вказує період за який вивводити дані (3.hours відповідно за останні 3 годин);
 
	1.2.выводит для каждого коммита из веток master, develop, в сообщении которых есть 
	упоминание заданного номера задачи (допустим задачи 231), его сообщение, автора и дату. 
	Сортировка по дате, первые более новые.

	>> git log master develop --pretty="%s - %cn - %cd" --grep=231
	
	%cd - дата коміту;
	--grep=231 - фільтрує коміти за значення (у даному випажку залишить ті в яких є 231)
	 "Сортировка по дате, первые более новые." - відбувається за замовчуванням.

2. “Избирательное слияние”. 
Задание: как добавить в develop только ваш коммит, но чтобы 3 коммита после него в develop не попали?

Рішення:
	1-й варіант 
	Можна видалити останні 3 коміта за допомогою команди git reset:
	>> git reset --hard HEAD~3
	>> git push -f
	
	--hard - режимм який змінює файли у робочій директорії;
	HEAD~3 відповідно 3 останні зміни від теперішнього заголовку;

	
	2-й варіант 
	Можна через cherry-pick:
	//знаходячись в вітці develop-feature1 
	>> git log 
	//копіюємо SHA-1 checksum свого комміта (3cc3785c1d342a9b....)
	// переключемося на необхідну вітку
	>> git checkout develop
	//і додамо наш коміт
	>> git cherry-pick 3cc3785c1d342a9b....
	//ну і пушимо наші зміни на сервер 
	>> git push
	

3. “Исправление ошибок”.
Задание: Предложите вариант, как наиболее просто исправить ситуацию, чтобы тим лид не увидел ваш промах.

Рішення:
	//Вибираємо нашу вітку
	>> git checkout develop-feature3
	//Здійснюємо інтерактиіне переміщення двох останніх коментарів(якщо слідувати малюнку, хотя їх може бути і більше)
	>> git rebase -i HEAD~2 
	//далі у відкрившомуся файлі з комітами міняємо pick на reword і сохраняємо
	// далі git по черзі буде нам пропонувати змінювати коміти
	//після всіх виправлень пушимо зміни на сервер
	>> git push -f 
	
	-f - або -force відбувається оновлення вітки, звичайний пуш 
	не підходить при зміні чи затиранні коментарів він виводить помилки